#!/usr/bin/env python
#
# Copyright (c) Paul Tagliamonte
# GNU GPL-3+, 2011
#

from optparse import OptionParser
import Syn.s as syn
import Syn.log as l
import Syn.db
import Syn.errors

attrs = [
	"package",
	"version",
	"description",
	"homepage",
	"download",
	"maintainer",
	"deps",
]

def nuke(foo, bar, baz, mani):
	Syn.db.strapDB()

parser = OptionParser()

parser.add_option( "-b", "--build", dest = "build", help = "Build a syn source ball." )
parser.add_option( "-n", "--info",  dest = "info",  help = "Read binary package metadata" )
parser.add_option( "-q", "--query", dest = "query", help = "Query the package database" )

# parser.add_option( "--NUKE", action="callback", callback=nuke, help = "Nuke the package states" )

(options, args) = parser.parse_args()

if options.build:
	try:
		if syn.buildSourcePackage(options.build) != 0:
			l.l(l.CRITICAL,"Failure to build!")
		else:
			l.l(l.CRITICAL,"Built with success!")
	except Syn.errors.InvalidArchiveException as e:
		l.l(l.CRITICAL,str(e))
		pass

if options.info:
	try:
		info = syn.getBinaryMetadata(options.info)
		for attr in attrs:
			if isinstance(info[attr], list):
				print attr + ":	"
				for x in info[attr]:
					print "  " + str(x)
			elif isinstance(info[attr], dict):
				print attr + ":	"
				for x in info[attr]:
					print "  " + str(info[attr][x])
			else:
				print attr + ":	" + info[attr]
	except Syn.errors.InvalidArchiveException as e:
		l.l(l.CRITICAL,str(e))

if options.query:
	(package, version) = Syn.common.processFullID(options.query)
	db = Syn.db.SynDB()
	db.initPkg("bash","4.2")

	try:
		if version != None:
			state = db.queryState(package, version)
			print state
		else:
			state = db.queryGState(package)
			print state

	except Syn.errors.PackageNotFoundException as e:
		l.l(l.CRITICAL, str(e))
