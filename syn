#!/usr/bin/env python
#
# Copyright (c) Paul Tagliamonte
# GNU GPL-3+, 2011
#

from optparse import OptionParser

import Syn.common as c
import Syn.Global as g
import Syn.s      as syn
import Syn.db
import Syn.log
import os.path

parser = OptionParser()

parser.add_option("-n", "--info",     dest  = "info",     help = "Get metadata info on the package")
parser.add_option("-b", "--build",    dest  = "build",    help = "Build the syn source file")
parser.add_option("-i", "--install",  dest  = "install",  help = "Install a syn binary file")
parser.add_option("-d", "--database", dest  = "database", help = "Query the Database")

(options, args) = parser.parse_args()

attrs = [
	"package",
	"version",
	"description",
	"homepage",
	"maintainer",
	"deps",
]

execd = False

if hasattr(options, "info") and options.info != None:
	try:
		meta = syn.metadump(options.info)
		for attr in attrs:
			if isinstance(meta[attr], list):
				print attr + ":	"
				for x in meta[attr]:
					print "  " + str(x)
			elif isinstance(meta[attr], dict):
				print attr + ":	"
				for x in meta[attr]:
					print "  " + str(meta[attr][x])
			else:
				print attr + ":	" + meta[attr]
		execd = True
	except NameError as e:
		print e

if hasattr(options, "build") and options.build != None:
	try:
		syn.buildFromSource(options.build)
		execd = True
	except NameError as e:
		print e

if hasattr(options, "database") and options.database != None:
	try:
		database = Syn.db.loadCanonicalDB()
		package, version = c.processFullID(options.database)
		state = database.queryState(package, version)
		Syn.log.l(
			Syn.log.MESSAGE, "%s:	%s" % ( options.database, str(state) )
		)
		execd = True
	except NameError as e:
		print e

if hasattr(options, "install") and options.install != None:
	try:
		if syn.install(options.install) != 0:
			Syn.log.l(Syn.log.CRITICAL, "")
			Syn.log.l(Syn.log.CRITICAL, "******")
			Syn.log.l(Syn.log.CRITICAL, " FAILURE TO INSTALL")
			Syn.log.l(Syn.log.CRITICAL, "******")
			Syn.log.l(Syn.log.CRITICAL, "")
		else:
			Syn.log.l(Syn.log.MESSAGE, "Install went OK :)")
		execd = True
	except NameError as e:
		print e

if not execd:
	Syn.log.l(Syn.log.CRITICAL, "Failure. Run with --help for usage help")

