#!/usr/bin/env python
#
# Copyright (c) Paul Tagliamonte
# GNU GPL-3+, 2011
#

from optparse import OptionParser
import Syn.s as syn
import Syn.log as l
import Syn.db
import Syn.errors
import Syn.install
import Syn.bundle
import Syn.link

attrs = [
	"package",
	"version",
	"description",
	"homepage",
	"download",
	"maintainer",
	"deps",
]

parser = OptionParser()

parser.add_option( "-b", "--build",   dest = "build",   help = "Build a syn source ball." )
parser.add_option( "-n", "--info",    dest = "info",    help = "Read binary package metadata" )
parser.add_option( "-i", "--install", dest = "install", help = "Install a package to the filesystem." )
parser.add_option( "-v", "--verify",  dest = "verify",  help = "Verify a package" )
parser.add_option( "-q", "--query",   dest = "query",   help = "Query the package database" )
parser.add_option( "-l", "--link",    dest = "link",    help = "Link a package into the filesystem" )
parser.add_option( "-u", "--unlink",  dest = "unlink",  help = "Unlink a package into the filesystem" )

(options, args) = parser.parse_args()

if options.build:
	try:
		if syn.buildSourcePackage(options.build) != 0:
			l.l(l.CRITICAL,"Failure to build!")
		else:
			l.l(l.CRITICAL,"Built with success!")
	except Syn.errors.InvalidArchiveException as e:
		l.l(l.CRITICAL,str(e))

if options.info:
	try:
		info = syn.getBinaryMetadata(options.info)
		for attr in attrs:
			if isinstance(info[attr], list):
				print attr + ":	"
				for x in info[attr]:
					print "  " + str(x)
			elif isinstance(info[attr], dict):
				print attr + ":	"
				for x in info[attr]:
					print "  " + str(info[attr][x])
			else:
				print attr + ":	" + info[attr]
	except Syn.errors.InvalidArchiveException as e:
		l.l(l.CRITICAL,str(e))

if options.query:
	#db.registerNewPackage("bash", "4.2", "U")
	#db.sync()

	(package, version) = Syn.common.processFullID(options.query)
	db = Syn.db.loadCanonicalDB()

	try:
		if version != None:
			state = db.queryState(package, version)
			print package + ":	" + Syn.db.HR_STATE[state['status']]
		else:
			state = db.queryGState(package)
			print "Active Package Version: " + str(state['linked'])
			print "Registered Versions:"
			for version in state['installed']:
				print "  " + version + ":	" + Syn.db.HR_STATE[state['installed'][version]['status']]

	except Syn.errors.PackageNotFoundException as e:
		l.l(l.CRITICAL, str(e))

if options.verify:
	try:
		Syn.tarball.archive(options.verify, verify=True, inPlace=False)
	except Syn.errors.SynException as e:
		l.l(l.CRITICAL,str(e))

if options.install:
	try:
		Syn.install.installArchive(
			Syn.tarball.archive(options.install)
		)
	except Syn.errors.SynException as e:
		l.l(l.CRITICAL,"*****")
		l.l(l.CRITICAL,str(e))
		l.l(l.CRITICAL,"*****")

if options.link:
	(pkg, ver) = Syn.common.processFullID(options.link)
	try:
		if ver != None:
			Syn.link.linkPkg(pkg, ver)
		else:
			l.l(l.CRITICAL,"*****")
			l.l(l.CRITICAL,"Not a full versioned package")
			l.l(l.CRITICAL,"*****")
	except Syn.errors.SynException as e:
		l.l(l.CRITICAL,str(e))

if options.unlink:
	(pkg, ver) = Syn.common.processFullID(options.unlink)
	try:
		if ver != None:
			Syn.link.unlinkPkg(pkg, ver)
		else:
			l.l(l.CRITICAL,"*****")
			l.l(l.CRITICAL,"Not a full versioned package")
			l.l(l.CRITICAL,"*****")
	except Syn.errors.SynException as e:
		l.l(l.CRITICAL,str(e))

