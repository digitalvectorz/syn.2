Syn Package Manager
===================
Paul Tagliamonte <paultag@ubuntu.com>
:Author Initials: PRT

The Syn Package Manager is an advanced package manager
written in Python. It's aim is to be "smart". It depends
on an advanced user, and hacker. It is able to install
binary packages and source packages in the exact same way.

Gentoo's speed gains with Debian's ease of use.

ACHTUNG!!!
----------

[WARNING]
The Syn Package Manager is still in it's infancy. It is being run on
my machine. That's it. It _may_ brake your machine. Not my fault.
Send me an email, but don't blame me. Don't use it if you don't want
to hose your machine. I'm *serious*. This is untested.

Dedication
----------

[verse, W.B. Yeats, He Wishes For The Cloths Of Heaven]
__________________________________________________
HAD I the heavens' embroidered cloths,
Enwrought with golden and silver light,
The blue and the dim and the dark cloths
Of night and light and the half-light,
I would spread the cloths under your feet:
But I, being poor, have only my dreams;
I have spread my dreams under your feet;
Tread softly because you tread on my dreams.
__________________________________________________

Syn Command Functions
---------------------

This is a quick lookup for basic functions of Syn.


Automake ( -a, --automake )
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Example Usage: +syn -a file-1.0.tar.gz+

Automake the pristine tar.gz. This option has a high rate of failure.

Setup ( -s, --setup )
~~~~~~~~~~~~~~~~~~~~~
Example Usage: +syn -s file-1.0.tar.gz+

Extract the archive, and set up the syn metafolder.

Configure ( -c, --configure )
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Example Usage: +syn -c+

Configure the extracted source archive. Imports global syn settings.

Build ( -b, --build )
~~~~~~~~~~~~~~~~~~~~~
Example Usage: +syn -b+

Start building the application. This is the compile step.

Package ( -p, --pack )
~~~~~~~~~~~~~~~~~~~~~~
Example Usage: +syn -p+

Package the application. This will write the archive to +../file-1.0-syn1.syn+

Template ( -t, --template )
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Example Usage: +syn -t+

Template the application. This will allow you to make the app with all patches,
configurations and metadata intact. Writes to +../file-1.0-syn1.synt+


Syn function Help
-----------------

This is a comprehensive developer's guide to each function.

Global Files
~~~~~~~~~~~~

sync files
^^^^^^^^^^

+~/.syn/build.sync+, +/etc/syn/build.sync+
++++++++++++++++++++++++++++++++++++++++++

This file dictates the build and configure process. This contains
all of the +ENV+ varables, +ConfigFlags+ and +BuildFlags+.

A well formated "test" sync file looks like the following example.
Note that newlines and spacing is not needed.

--------------------------------------
{
    "env" : { 
        "VERSION_MODIFIER" : "syn",
        "CFLAGS"           : "-Os -march=core2",
        "CCFLAGS"          : "-Os -march=core2",
        "CXXFLAGS"         : "-Os -march=core2"
    },
    "ConfigFlags" : {
        "usrpfx" : "--prefix=\/usr",
        "confdr" : "--sysconfdir=\/etc",
        "execdr" : "--libexecdir=\/usr\/lib",
        "vardir" : "--localstatedir=\/var",
        "mandir" : "--mandir=\/usr\/share\/man",
        "infdir" : "--infodir=\/usr\/share\/info"
    },
    "BuildFlags" : {
        "flag"   : "-j3"
    }
}
--------------------------------------

One can see there are three subsections inside the configuration file.
They are *env*, *ConfigFlags* and *BuildFlags*. *env* sets the shell
envvars, in case the Makefile or configure scripts using them. This is how
we are currently "suggesting" the machine arch and optimization level. *ConfigFlags*
are flags that will be appended to the +./configure+ shell call, but will *NOT* be
used if syn is using a rules file. *BuildFlags* will be passed into the +make+ system
call, same rule as before, if there is a rules file, these will not be passed in.

NOTE: ConfigFlags and BuildFlags *MUST* have unique IDs! The IDs don't matter, but the way
we are using JSON forces IDs to be unique. It will be handy later on, to exclude flags, or choose,
but for now, just follow the rules.

Metafile ( metadata.synm )
~~~~~~~~~~~~~~~~~~~~~~~~~~

This file contains all the data on the package. Build times ( to 
work out how long a package will take to compile ) are tracked,
along with the packager's name, and some other goodies. Following 
is a complete syn metafile.

------------------------------------
{
    "Version"    : 1,
    "Maketype"   : "Distrub",
    "ConfigTime" : 1264707257.4419961,
    "SetupTime"  : 1264707232.0869391,
    "ConfigType" : "Distrub",
    "MakeTime"   : 1264707265.7331331,
    "SetupBy"    : "tag"
}
------------------------------------

*Version* dictates what version the template is. This will dictate what
version the binary package will be as well.

*Maketype* and *ConfigType* have two options, +Distrub+, signifying it was made with the stock
Makefile ( or a patched makefile ), or +Rules+, dictating it used the rules file.

*SetupBy* is the shell username of the hacker who created the package.

Setup ( -s, --setup )
~~~~~~~~~~~~~~~~~~~~~

Setup is nifty. It will use the defaults system-wide, starting at
the local ( ~/.syn/ ) folder, and on failure, moving to /etc/syn.
This places that file into the local metafolder ( for tweeking ).
Every step after this will use the package local build file. This
starts off the Metafile, and loggs the builder's name and time.
The metafile will keep notes on everything. See the Metafile section
for more information.
