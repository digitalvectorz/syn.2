#!/usr/bin/env python
#
# Copyright (c) Paul Tagliamonte
# GNU GPL-3+, 2011
#

from optparse import OptionParser

import Syn.Global as g
import Syn.log as l
import Syn.s   as syn
import Syn.policy
import Syn.errors
import Syn.synlint
import Syn.bundle
import json
import sys

parser = OptionParser()

parser.add_option( "-b", "--build",   dest = "build",   help = "Build a syn source ball" )
parser.add_option( "-l", "--lint",    dest = "lint",    help = "Check the package for lint" )
parser.add_option( "-v", "--verify",  dest = "verify",  help = "Verify a package" )
parser.add_option( "-s", "--summary", dest = "summary", help = "Gen package kickass file" )
parser.add_option( "-m", "--metaf",   dest = "metaf",   help = "Edit the metafile" )
parser.add_option( "-f", "--metafro", dest = "metafro", help = "Read the metafile" )
parser.add_option( "-d", "--bbuild",  dest = "bbuild",  help = "Binary file build" )

parser.add_option( "-r", "--roll",    dest = "roll",    help = "Roll out a source package",
	action = "store_true", default = False)

parser.add_option( "-o", "--loud",    dest = "verbose", help = "Make the app whine",
	action = "store_true", default = False)
parser.add_option( "-p", "--policy",  dest = "policy",  help = "Check the current policy version",
	action = "store_true", default = False)


(options, args) = parser.parse_args()

if options.verbose:
	Syn.log.VERBOSITY = Syn.log.PEDANTIC

if options.policy:
	print Syn.policy.POLICY_VERSION

def setAttr(meta, string):
	try:
		dot = string.index(".")
		eq = string.index("=")

		if dot > eq:
			raise ValueError("Dummy!")

		fart        = string[:dot]
		masterklass = string[dot+1:]

		ms = setAttr(meta[fart], masterklass)
		return meta
	except ValueError as e:
		try:
			eq = string.index("=")
			val   = string[eq+1:]

			try:
				val = json.loads(val)
				#print "Using the decoded JSON string, and not the string literal"
			except Exception as e:
				pass

			key   = string[:eq]
			meta[key] = val
			return meta
		except ValueError as e:
			print "Invalid attr string! Shit!"
			return None

def getAttr(meta, string):
	try:
		dot      = string.index(".")
		if dot != None:
			nextID   = string[:dot]
			nextPrcs = string[dot+1:]
			subtree = meta[nextID]
			return getAttr(subtree, nextPrcs)
		else:
			raise ValueError("Dummy")
	except ValueError as e:
		return meta[string]


if options.metaf:
	f = open(g.SYN_SRC_DIR + g.SYN_BUILDDIR_META,'r')
	meta = json.loads(f.read())
	f.close()
	mobj = setAttr(meta, options.metaf)
	meta = json.dumps(mobj, sort_keys = True, indent = 4)
	f = open(g.SYN_SRC_DIR + g.SYN_BUILDDIR_META,'w')
	f.write(meta)

if options.metafro:
	f = open(g.SYN_SRC_DIR + g.SYN_BUILDDIR_META,'r')
	meta = json.loads(f.read())
	f.close()
	frob = getAttr(meta, options.metafro)
	print frob

if options.bbuild:
	f = open(g.SYN_SRC_DIR + g.SYN_BUILDDIR_META,'r')
	meta = json.loads(f.read())
	f.close()

	( b_pth, l_pth ) = Syn.build.package(meta)

if options.roll:
	if l.VERBOSITY < l.LOG:
		print "It's unwise to run a build without `-o' or `--loud'!!"
		print "You *will* miss out on synlint checks. Rest assured."

	try:
		pkg = Syn.bundle.bundleSource(".")
		( r_errs, n_errs, g_errs ) = Syn.synlint.runCheck(pkg)
	except Syn.errors.InvalidArchiveException as e:
		l.l(l.CRITICAL,str(e))

if options.lint:
	if l.VERBOSITY < l.LOG:
		print "It's stupid to run lint without `-o' or `--loud'."
		print "Unless you're a robot. Then you don't understand this."
		print "Or you do, but you don't have hurt feelings. No emotions, bitch."

	(r_errs, n_errs, g_errs) = Syn.synlint.runCheck(options.lint)

	clean = False
	if r_errs + n_errs == 0:
		clean = True

	if clean:
		sys.exit(0)
	else:
		sys.exit(1)

if options.summary:
	try:
		ar = Syn.tarball.archive(options.summary)

		summery = syn.gensum(ar)
		links   = syn.genLibraryLinks(ar)

		sumfile = {
			"summery" : summery,
			"links"   : links
		}

		metafile = ar.getConf(g.SYN_BINARY_META)

		pkg = metafile['package'] + "-" + metafile['version']

		f = open(pkg + g.SYN_GOODIE_FILE, 'w')
		f.write(json.dumps(sumfile, sort_keys = True, indent = 4))
		f.close()

	except Syn.errors.SynException as e:
		l.l(l.CRITICAL,str(e))

if options.build:
	try:
		print "Building package. Please hold."
		if syn.buildSourcePackage(options.build) != 0:
			l.l(l.CRITICAL,"Failure to build!")
		else:
			l.l(l.CRITICAL,"Built with success!")
	except Syn.errors.InvalidArchiveException as e:
		l.l(l.CRITICAL,str(e))

if options.verify:
	try:
		Syn.tarball.archive(options.verify, verify=True, inPlace=False)
	except Syn.errors.SynException as e:
		l.l(l.CRITICAL,str(e))

