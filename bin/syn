#!/usr/bin/env python
#
# Copyright (c) Paul Tagliamonte
# GNU GPL-3+, 2011
#

from optparse import OptionParser

import Syn.log as l
import Syn.s   as syn
import Syn.errors
import Syn.install
import Syn.link
import sys
import os

attrs = [
	"package",
	"version",
	"description",
	"maintainer",
	"deps",
]

parser = OptionParser()


parser.add_option( "-i", "--install", dest = "install", help = "Install a package to the filesystem" )
parser.add_option( "-n", "--info",    dest = "info",    help = "Read binary package metadata" )
parser.add_option( "-l", "--link",    dest = "link",    help = "Link a package into the filesystem" )
parser.add_option( "-u", "--unlink",  dest = "unlink",  help = "Unlink a package into the filesystem" )
parser.add_option( "-c", "--chroot",  dest = "chroot",  help = "Use the following chroot to do dirty work" )
parser.add_option( "-o", "--loud",    dest = "verbose", help = "Make the app whine",
	action = "store_true", default = False)

(options, args) = parser.parse_args()

if options.verbose:
	Syn.log.VERBOSITY = Syn.log.PEDANTIC

if options.chroot:
	Syn.reg.CHROOT = os.path.abspath(options.chroot)

if options.info:
	try:
		info = syn.getBinaryMetadata(options.info)
		for attr in attrs:
			if isinstance(info[attr], list):
				print attr + ":	"
				for x in info[attr]:
					print "  " + str(x)
			elif isinstance(info[attr], dict):
				print attr + ":	"
				for x in info[attr]:
					print "  " + str(info[attr][x])
			else:
				print attr + ":	" + info[attr]
	except Syn.errors.InvalidArchiveException as e:
		l.l(l.CRITICAL,str(e))

if options.install:
	if Syn.common.isRoot():
		try:
			Syn.install.installArchive(
				Syn.tarball.archive(options.install)
			)
		except Syn.errors.SynException as e:
			l.l(l.CRITICAL,"*****")
			l.l(l.CRITICAL,str(e))
			l.l(l.CRITICAL,"*****")
	else:
		l.l(l.CRITICAL,"*****")
		l.l(l.CRITICAL,"You need to be root!")
		l.l(l.CRITICAL,"*****")

if options.link:
	if Syn.common.isRoot():
		(pkg, ver) = Syn.common.processFullID(options.link)
		try:
			if ver != None:
				Syn.link.linkPkg(pkg, ver)
				# THIS IS AN UNSTABLE POINT TO PROCESS!!!!!!!!
			else:
				l.l(l.CRITICAL,"*****")
				l.l(l.CRITICAL,"Not a full versioned package")
				l.l(l.CRITICAL,"*****")
		except Syn.errors.SynException as e:
			l.l(l.CRITICAL,str(e))
	else:
		l.l(l.CRITICAL,"*****")
		l.l(l.CRITICAL,"You need to be root!")
		l.l(l.CRITICAL,"*****")

# This here MAY or MAY NOT be 
# in a chroot. We need to be *VERY* careful
# with processing after this point.

if Syn.reg.CHROOT_TOUCHED:
	l.l(l.CRITICAL,"Because we did a chroot link,")
	l.l(l.CRITICAL," we need to abort here.")
	l.l(l.CRITICAL," chroots are one way.")
	sys.exit(0)

if options.unlink:
	if Syn.common.isRoot():
		(pkg, ver) = Syn.common.processFullID(options.unlink)
		try:
			if ver != None:
				Syn.link.unlinkPkg(pkg, ver)
				# THIS IS AN UNSTABLE POINT TO PROCESS!!!!!!!!
			else:
				l.l(l.CRITICAL,"*****")
				l.l(l.CRITICAL,"Not a full versioned package")
				l.l(l.CRITICAL,"*****")
		except Syn.errors.SynException as e:
			l.l(l.CRITICAL,str(e))
	else:
		l.l(l.CRITICAL,"*****")
		l.l(l.CRITICAL,"You need to be root!")
		l.l(l.CRITICAL,"*****")

# This here MAY or MAY NOT be 
# in a chroot. We need to be *VERY* careful
# with processing after this point.

if Syn.reg.CHROOT_TOUCHED:
	l.l(l.CRITICAL,"Because we did a chroot unlink,")
	l.l(l.CRITICAL," we need to abort here.")
	l.l(l.CRITICAL," chroots are one way.")
	sys.exit(0)
